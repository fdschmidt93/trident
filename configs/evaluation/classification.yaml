apply:
  batch: null  # takes (batch)
  outputs:     # takes (outputs, batch)                             
    _target_: src.utils.hydra.partial
    _partial_: src.evaluation.classification.get_preds
  # takes (flattened_step_outputs: dict) where list of step_outputs are flattened
  step_outputs: null

# Which keys/attributes are supposed to be collected from `outputs` and `batch`
step_outputs:
  outputs: "preds" # can be a str
  batch: # or a list[str]
    - labels

# either metrics or val_metrics and test_metrics
# where the latter
metrics:
  # name of the metric used eg for logging
  accuracy:
    # instructions to instantiate metric, preferrably torchmetrics.Metric
    metric:
      _target_: torchmetrics.Accuracy
    # either on_step: true or on_epoch: true
    on_step: true
    compute: 
      preds: "outputs:preds"
      target: "batch:labels"

  f1:
    metric:
      _target_: torchmetrics.F1
    on_step: true
    compute:
      preds: "outputs:preds"
      target: "batch:labels"
